/**
 * {{set}}
 *
 * Handlebar helper for Assemble
 *
 * Allows to set a variable directly in the HTML
 *
 * You can use JS to set a dynamic value, JS expression will be eval() if possible.
 * You can disable JS eval() by the parameter jsEnabled=false
 *
 * can contain assemble variables with the same syntax that in grunt config `<%= myVar %>`
 *
**/

module.exports.register = function (Handlebars, options) {

	Handlebars.registerHelper('set', function (context) {
		var assemble = this;
		var params = context.hash || {},
			data,
			variable;

		if (!params)
			return;

		var jsEnabled = true;
		// check if JS was explicitly Disabled by jsEnable=false attribute
		if (params.hasOwnProperty('jsEnabled')) {
			jsEnabled = params['jsEnabled'];
		}

		// get var name to set
		for (var key in params) {
			if (key !== 'jsEnabled') {
				variable = key;
			}
		}

		if (!params.hasOwnProperty(variable))
			return;

		// get data for the var
		data = params[variable];

		// place vars in the data if some
		data = placeAssembleVars(data, assemble);

		if (jsEnabled) {
			// if data is not json, try to eval the expression
			// so the var could contain something that is generated by JS
			if (!isJson(data)) {
				try {
					var code = eval(data);

					this[variable] = code;
					return;
				}
				catch (e) {

				}
			}
		}

		// data is not JS expression
		// set the vas as object if data is json else just set as text
		data = isJson(data) ? JSON.parse(data) : data;

		// set the var in the assemble so it can be showed with {{varName}} in html
		this[variable] = data;

	});

	/**
	 * Checks is the provided string is a JSON
	 * @param string
	 * @returns {boolean}
	 */
	function isJson(string) {
		try {
			JSON.parse(string);
		} catch (e) {
			return false;
		}
		return true;
	}

	/**
	 * Looks for <%= vars %> in the string than replaces it with the value from provided variables object
	 * @param string
	 * @param assemble {Object} where is is the value for the provided var is supposed to be
	 * @returns {String}
	 */
	function placeAssembleVars(string, assemble) {
		var vars = [],
			re = /<%= (.+) %>/g,
			m,
			i = 0;

		// get all <%= vars %> from the string
		while ((m = re.exec(string)) !== null) {
			if (m.index === re.lastIndex) {
				re.lastIndex++;
			}
			vars[i] = m[1];
			i++;
		}

		var replaceValue,
			lookingIn = assemble;

		// looking in assemble vars and currently rendered page vars
		// the current page vars will override ones from assemble options

		// for each <%= var %> search existence in assemble
		for (i = 0; i < vars.length; i++) {
			var varExists = false;
			lookingIn = assemble;
			if (lookingIn.hasOwnProperty(vars[i])) {
				replaceValue = lookingIn[vars[i]];
				varExists = true;
			}
			lookingIn = assemble.page;
			if (lookingIn.hasOwnProperty(vars[i])) {
				replaceValue = lookingIn[vars[i]];
				varExists = true;
			}
			if (!varExists) {
				replaceValue = '';
			}
			string = string.replace('<%= ' + vars[i] + ' %>', replaceValue);
		}
		return string;
	}
};